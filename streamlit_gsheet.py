import streamlit as st
import matplotlib.pyplot as plt
import pandas as pd
from streamlit_gsheets import GSheetsConnection
from streamlit_autorefresh import st_autorefresh
import datetime
import base64

# C·∫•u h√¨nh giao di·ªán Streamlit
st.set_page_config(page_title="Nghi√™n c∆∞ÃÅu khoa hoÃ£c", layout="wide")

# H√†m ƒë·ªÉ chuy·ªÉn ·∫£nh sang d·∫°ng Base64
def get_base64(file_path):
    with open(file_path, "rb") as f:
        encoded_string = base64.b64encode(f.read()).decode()
    return encoded_string

# ƒê·ªçc ·∫£nh n·ªÅn t·ª´ th∆∞ m·ª•c m√°y
background_image_path = "A_luoi.jpg"
background_base64 = get_base64(background_image_path)

st.markdown("""
    <style>
        /* K√≠ch th∆∞·ªõc ch·ªØ tr√™n m√†n h√¨nh l·ªõn */
        h1 { font-size: 32px !important; }
        h2 { font-size: 28px !important; }
        h3 { font-size: 24px !important; }
        p, li, a { font-size: 18px !important; }

        /* M√†n h√¨nh tablet (t·ª´ 768px tr·ªü xu·ªëng) */
        @media screen and (max-width: 768px) {
            h1 { font-size: 26px !important; }
            h2 { font-size: 24px !important; }
            h3 { font-size: 20px !important; }
            p, li, a { font-size: 16px !important; }
        }

        /* M√†n h√¨nh ƒëi·ªán tho·∫°i (t·ª´ 480px tr·ªü xu·ªëng) */
        @media screen and (max-width: 480px) {
            h1 { font-size: 22px !important; }
            h2 { font-size: 20px !important; }
            h3 { font-size: 18px !important; }
            p, li, a { font-size: 14px !important; }
        }

        /* ƒêi·ªÅu ch·ªânh chi·ªÅu r·ªông c·ªßa select box */
        div[data-baseweb="select"] {
            width: 100% !important;
        }

    </style>
""", unsafe_allow_html=True)


# CSS t√πy ch·ªânh ƒë·ªÉ th√™m h√¨nh n·ªÅn
page_bg_img = f"""
<style>
    .stApp {{
        background-image: url("data:image/jpg;base64,{background_base64}");
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
    }}
</style>
"""

# Th√™m CSS v√†o ·ª©ng d·ª•ng
st.markdown(page_bg_img, unsafe_allow_html=True)

#Hi·ªÉn th·ªã ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.image(r"Tieu_de.png", use_container_width=True)

# T·ª± ƒë·ªông l√†m m·ªõi trang m·ªói 500 gi√¢y (500.000 ms)
st_autorefresh(interval=500 * 1000, key="data_refresh")

def load_data():
    try:
        conn = st.connection("gsheets", type=GSheetsConnection)  # K·∫øt n·ªëi Google Sheets
        df = conn.read(worksheet="DuBao", ttl=0)  # ƒê·ªçc d·ªØ li·ªáu t·ª´ Google Sheets
        return df
    except Exception as e:
        st.error("Trang web ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau!")
        return None
df = load_data()

# Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá tr∆∞·ªõc khi x·ª≠ l√Ω
if df is not None and not df.empty and "Day" in df.columns and "X" in df.columns and "Q2" in df.columns:
    # Chuy·ªÉn c·ªôt "Day" sang ki·ªÉu datetime
    df["Day"] = pd.to_datetime(df["Day"], errors="coerce")    
    # X√≥a c√°c d√≤ng c√≥ gi√° tr·ªã NaN trong c·ªôt X ho·∫∑c Q2
    df = df.dropna(subset=["X", "Q2"])
    # S·∫Øp x·∫øp theo ng√†y v√† gi·ªØ l·∫°i b·∫£n ghi cu·ªëi c√πng c·ªßa m·ªói ng√†y
    df = df.sort_values(by="Day").drop_duplicates(subset="Day", keep="last").tail(14)
    # ƒê·ªãnh d·∫°ng l·∫°i c·ªôt ng√†y ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n
    df["Day"] = df["Day"].dt.strftime("%d/%m")

    st.markdown("<div style='font-size: 26px; color: #003399; font-weight: bold;'>üìÖ Ch·ªçn ng√†y hi·ªÉn th·ªã:</div>", unsafe_allow_html=True)
    day_options = ["Qu√° kh·ª© v√† d·ª± b√°o", "7 ng√†y qu√° kh·ª©", "2 ng√†y t·ªõi", "3 ng√†y t·ªõi", "4 ng√†y t·ªõi", "5 ng√†y t·ªõi", "6 ng√†y t·ªõi", "7 ng√†y t·ªõi"]
    st.markdown("""
    <style>
    div[data-baseweb="select"] {
        width: 300px !important;  /* ƒêi·ªÅu ch·ªânh chi·ªÅu r·ªông theo mong mu·ªën */}
    </style>""", unsafe_allow_html=True)

    selected_option = st.selectbox("", day_options, index=0, key="day_selector", label_visibility="collapsed")


    # L·ªçc d·ªØ li·ªáu theo l·ª±a ch·ªçn
    if selected_option == "7 ng√†y qu√° kh·ª©":
        filtered_df = df.iloc[:7]
    #elif selected_option == "H√¥m nay":
        #filtered_df = df.iloc[7:8]    
    elif selected_option == "Qu√° kh·ª© v√† d·ª± b√°o":
        filtered_df = df
    else:
        days_ahead = int(selected_option.split()[0])  # L·∫•y s·ªë ng√†y t·ª´ chu·ªói
        filtered_df = df.iloc[7 : 7 + days_ahead]

    st.markdown("<div style='text-align: center; font-size: 40px; font-weight: bold; color: purple;'>üìä S·∫¢N PH·∫®M D·ª∞ B√ÅO L∆ØU L∆Ø·ª¢NG V·ªÄ H·ªí TH·ª¶Y ƒêI·ªÜN A L∆Ø·ªöI</div>", unsafe_allow_html=True)
    fig, ax1 = plt.subplots(figsize=(9, 4), facecolor=None)
    fig.patch.set_alpha(0.6)

    # Chia d·ªØ li·ªáu th√†nh 2 ph·∫ßn: 7 ng√†y ƒë·∫ßu & 7 ng√†y sau
    past = filtered_df.iloc[:8]  # 7 ng√†y ƒë·∫ßu (c≈© h∆°n)
    present = filtered_df.iloc[7:]  # 7 ng√†y sau (m·ªõi h∆°n)

    # T√≠nh kho·∫£ng d·ª±a tr√™n to√†n b·ªô d·ªØ li·ªáu ƒë·ªÉ gi·ªØ c·ªë ƒë·ªãnh tr·ª•c Y
    q2 = abs(df["Q2"].max() - df["Q2"].min()) * 0.15
    q2_min = df["Q2"].min() - q2
    q2_max = df["Q2"].max() * 1.5
    x2_min = df["X"].min()
    x2_max = df["X"].max() * 3

    # Tr·ª•c Y b√™n tr√°i (L∆∞u l∆∞·ª£ng Q2)
    ax1.set_xlabel("Ng√†y")
    ax1.set_ylabel("L∆∞u l∆∞·ª£ng (m¬≥/s)", color="#cd6001")
    ax1.plot(past["Day"], past["Q2"], marker="o", linestyle="-", color="brown", label="L∆∞u l∆∞·ª£ng qu√° kh·ª©")
    ax1.plot(present["Day"], present["Q2"], marker="o", linestyle="--", color="#fdac01", label="L∆∞u l∆∞·ª£ng d·ª± b√°o")
    ax1.tick_params(axis="y", labelcolor="#cd6001")
    ax1.set_ylim(q2_min, q2_max)
    ax1.set_facecolor("none")  # Tr·ª•c ch√≠nh kh√¥ng c√≥ n·ªÅn
    ax1.grid(True, linestyle="--", color="#cd6001", alpha=0.5)  # L∆∞·ªõi cho tr·ª•c X v√† tr·ª•c Y b√™n tr√°i (Q2)
    # Hi·ªÉn th·ªã gi√° tr·ªã l∆∞u l∆∞·ª£ng d·ª± ƒëo√°n tr√™n bi·ªÉu ƒë·ªì
    for i, txt in enumerate(past["Q2"]):
        ax1.annotate(f"{txt:.1f}", (past["Day"].iloc[i], past["Q2"].iloc[i]),
             textcoords="offset points", xytext=(0, 5), ha='center', fontsize=10, color="brown")
    for i, txt in enumerate(present["Q2"]):
        ax1.annotate(f"{txt:.1f}", (present["Day"].iloc[i], present["Q2"].iloc[i]),
                     textcoords="offset points", xytext=(0, 5), ha='center', fontsize=10, color="#fdac01")

    # Tr·ª•c Y b√™n ph·∫£i (L∆∞·ª£ng m∆∞a - X) - Hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng ƒë∆∞·ªùng nh∆∞ng ƒë·∫£o ng∆∞·ª£c tr·ª•c
    ax2 = ax1.twinx()
    ax2.set_ylabel("L∆∞·ª£ng m∆∞a (mm)", color="blue")
    ax2.bar(past["Day"], past["X"], color="#426ec7", alpha=0.8, label="L∆∞·ª£ng m∆∞a qu√° kh·ª©")
    ax2.bar(present["Day"], present["X"], color="#426ec7", alpha=0.6, label="L∆∞·ª£ng m∆∞a d·ª± b√°o")
    ax2.tick_params(axis="y", labelcolor="blue")
    ax2.invert_yaxis()  # ƒê·∫£o ng∆∞·ª£c tr·ª•c Y: 0 n·∫±m tr√™n, gi√° tr·ªã l·ªõn xu·ªëng d∆∞·ªõi
    ax2.set_ylim(x2_max, x2_min)
    ax2.set_facecolor("none")  # Tr·ª•c ch√≠nh kh√¥ng c√≥ n·ªÅn
    ax2.grid(True, linestyle="--", color="blue", alpha=0.3)  # L∆∞·ªõi cho tr·ª•c Y b√™n ph·∫£i (X)

    # Hi·ªÉn th·ªã gi√° tr·ªã l∆∞·ª£ng m∆∞a tr√™n c·ªôt
    for i, txt in enumerate(filtered_df["X"]):
        ax2.annotate(f"{txt:.1f}", (filtered_df["Day"].iloc[i], filtered_df["X"].iloc[i]),
                     textcoords="offset points", xytext=(0, 5), ha='center', fontsize=10, color="blue")


    # Th√™m ch√∫ th√≠ch cho bi·ªÉu ƒë·ªì
    fig.legend(loc="upper center", bbox_to_anchor=(0.5, -0.1), fancybox=True, shadow=True, ncol=2)

    fig.tight_layout()
    st.pyplot(fig)

    col3, col4, col5 = st.columns([3, 5, 3])
    with col4:
        st.markdown("<div style='font-size: 32px; font-weight: bold; color: purple;'>T√ìM T·∫ÆT ƒê·ªÄ T√ÄI</div>", unsafe_allow_html=True)
        st.markdown("""
        <div style="text-align: justify; font-size: 18px; line-height: 1.6;">
        D·ª± b√°o d√≤ng ch·∫£y v·ªÅ h·ªì ch·ª©a sao cho ch√≠nh x√°c v√† bi·∫øt tr∆∞·ªõc nhi·ªÅu ng√†y ƒë·ªÉ ch·ªß ƒë·ªông v·∫≠n h√†nh khai th√°c hi·ªáu qu·∫£ l√† c√¥ng vi·ªác kh√¥ng h·ªÅ ƒë∆°n gi·∫£n v√† lu√¥n th√°ch th·ª©c c√°c nghi√™n c·ª©u. 
        Trong nh·ªØng nƒÉm g·∫ßn ƒë√¢y, vi·ªác ·ª©ng d·ª•ng b√†i to√°n h·ªçc m√°y v√†o d·ª± b√°o l∆∞u l∆∞·ª£ng t·ª´ l∆∞·ª£ng m∆∞a ƒë√£ ƒë∆∞·ª£c r·∫•t nhi·ªÅu nghi√™n c·ª©u trong v√† ngo√†i n∆∞·ªõc th·ª±c hi·ªán. 
        Tuy nhi√™n, tu·ª≥ thu·ªôc v√†o ƒë·∫∑c t√≠nh d·ªØ li·ªáu th·ªëng k√™ v√† ƒë·∫∑c t√≠nh v·∫≠t l√Ω c·ªßa l∆∞u v·ª±c m√† m·ªói m√¥ h√¨nh h·ªçc m√°y s·∫Ω h·ªçc v√† cho k·∫øt qu·∫£ d·ª± ƒëo√°n v·ªõi ƒë·ªô tin c·∫≠y kh√°c nhau. 
        Nghi√™n c·ª©u n√†y s·∫Ω th·ª±c hi·ªán tr√™n t·∫≠p d·ªØ li·ªáu g·ªìm l∆∞·ª£ng m∆∞a v√† l∆∞u l∆∞·ª£ng c·ªßa l∆∞u v·ª±c h·ªì A L∆∞·ªõi t·ª´ nƒÉm 2017 ƒë·∫øn nƒÉm 2021 v·ªõi 03 m√¥ h√¨nh h·ªçc m√°y ƒë∆∞·ª£c xem x√©t ƒë√≥ l√† RF, XGBoost v√† LSTM. 
        K·∫øt qu·∫£ hu·∫•n luy·ªán v√† ki·ªÉm tra cho th·∫•y m√¥ h√¨nh LSTM cho ch·ªâ s·ªë ƒë√°nh gi√° t·ªët h∆°n 2 m√¥ h√¨nh c√≤n l·∫°i (NSE =0.93; MAE = 17.47; RMSE = 33.11). 
        T·ª´ ƒë√≥ s·ª≠ d·ª•ng m√¥ h√¨nh LSTM ƒë·ªÉ d·ª± b√°o l∆∞u l∆∞·ª£ng v·ªÅ h·ªì A L∆∞·ªõi t·ª´ d·ªØ li·ªáu m∆∞a d·ª± b√°o s·∫≥n c√≥ tr√™n websites weather cho l∆∞u v·ª±c h·ªì A L∆∞·ªõi. 
        C√°c k·∫øt qu·∫£ d·ª± b√°o n√†y ƒë∆∞·ª£c t·ª± ƒë·ªông c·∫≠p nh·∫≠t ·ª©ng d·ª•ng web Streamlit.
        </div>
        """, unsafe_allow_html=True)

    with col3:
        st.markdown("<div style='font-size: 32px; font-weight: bold; color: purple; margin-bottom: -40px;'>TH√ÄNH VI√äN NH√ìM</div>", unsafe_allow_html=True)
        selected_option = st.selectbox("",["Sinh vi√™n th·ª±c hi·ªán", "Gi√°o vi√™n h∆∞·ªõng d·∫´n"])
        if selected_option == "Gi√°o vi√™n h∆∞·ªõng d·∫´n":
            st.markdown(f"""
            <div style="display: flex; flex-direction: column;">
            <p style="font-size: 26px; color: #003399; font-weight: bold; margin-bottom: 2px;">Gi√°o vi√™n h∆∞·ªõng d·∫´n:</p>
            <div style="font-size: 24px; line-height: 1.5;">
            PGS.TS. Nguy·ªÖn Ch√≠ C√¥ng<br>
            TS. ƒêoaÃÄn Vi√™ÃÅt Long<br>
            ThS. PhaÃ£m LyÃÅ Tri√™ÃÄu
            </div>
            </div>
            """, unsafe_allow_html=True)
        elif selected_option == "Sinh vi√™n th·ª±c hi·ªán":   
            st.markdown(f"""
            <div style="display: flex; flex-direction: column;">
            <p style="font-size: 26px; color: #003399; font-weight: bold; margin-bottom: 2px;">Sinh vi√™n th·ª±c hi·ªán:</p>
            <div style="font-size: 24px; line-height: 1.5;">
            L√™ T·∫•n Duy - 22DTTM<br>
            L√™ Thanh Thi√™n - 22DTTM
            </div>
            </div>
            """, unsafe_allow_html=True)
    with col5:
        st.markdown("<div style='font-size: 32px; font-weight: bold; color: purple;'>V·ªä TR√ç H·ªí A L∆Ø·ªöI</div>", unsafe_allow_html=True)
        st.components.v1.iframe("https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d5183.445656933609!2d107.16354377708113!3d16.196807863014435!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3140374a45533dc3%3A0x8147ee687f758a43!2zxJDhuq1wIFRoxrDhu6NuZyBOZ3Xhu5NuIFRodcyJeSDEkGnDqsyjbiBBIEzGsMahzIFp!5e1!3m2!1svi!2s!4v1743527770714!5m2!1svi!2s",
                 width=500, height=300)
